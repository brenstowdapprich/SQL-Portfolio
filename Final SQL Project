-- This project uses SQL queries to explore and analyze the Chinook database, 
-- which contains information about a digital media store. It includes data 
-- on customers, invoices, employees, tracks, albums, and artists.


#1. Return all customers who are **not** in the USA.
SELECT FirstName, LastName, CustomerId, Country 
FROM chinook.customers 
WHERE Country != "USA";

#2. Return all customers from **Brazil**.
SELECT * FROM chinook.customers 
WHERE Country = "Brazil";

#3. Return customer names and their invoice details for invoices billed in **Brazil**.
SELECT cust.FirstName, cust.LastName, inv.InvoiceId, inv.BillingCountry, inv.InvoiceDate
FROM chinook.invoices as inv 
LEFT JOIN chinook.customers as cust 
on inv.CustomerId = cust.CustomerId 
WHERE inv.BillingCountry = "Brazil";

#4. List all employees who have the title **"Sales Support Agent"**.
SELECT * FROM chinook.Employees
WHERE Title = "Sales Support Agent";

#5. List all the **distinct billing countries** from the invoices.
SELECT DISTINCT BillingCountry FROM chinook.Invoices;

#6. Return the employee names and invoice IDs they are responsible for via customer support representation.
SELECT emp.LastName, emp.Firstname, inv.InvoiceId
FROM chinook.Employees emp 
JOIN chinook.Customers cust ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.Invoices Inv ON Inv.CustomerId = cust.CustomerId;

#7. Return employee names, customer names, their countries, and total invoice amounts for their supported customers.
SELECT emp.LastName, emp.Firstname, cust.FirstName, cust.LastName, cust.Country, inv.total
FROM chinook.employees emp 
JOIN chinook.Customers cust ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.Invoices Inv ON Inv.CustomerId = cust.CustomerId;

#8. Count how many invoices were made in **2009**.
SELECT COUNT(*)
FROM chinook.Invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

#9. Calculate the **total sales** amount from invoices made in **2009**.
SELECT SUM(Total)
FROM chinook.Invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

#10. Return the track names and invoice line IDs from invoice items.
SELECT t.Name, i.InvoiceLineId
FROM chinook.Invoice_items i
JOIN chinook.Tracks t 
ON i.TrackId = t.TrackId;

#11. Return the artist name, track name, and invoice line ID for each invoice item.
SELECT ar.name as Artist, t.Name as Track, i.InvoiceLineId
FROM chinook.Invoice_items i
LEFT JOIN chinook.tracks t 
ON i.TrackID=t.TrackID
INNER JOIN chinook.albums a
ON a.AlbumID=t.AlbumID
LEFT JOIN chinook.artists ar
ON ar.ArtistID=a.ArtistID;

#12. Return the track name, album title, media type, and genre for each track.
SELECT t.Name AS 'Track Name', a.Title AS 'Album Title', m.Name AS 'Media Type', g.Name AS 'Genre'
FROM chinook.tracks t
JOIN chinook.Albums a 
on a.AlbumId = t.AlbumId
JOIN chinook.Media_Types m
on m.MediaTypeId = t.MediaTypeId
JOIN chinook.Genres g
on g.GenreId = t.GenreId;

#13. Return total sales made by each **Sales Support Agent**.
SELECT emp.FirstName, emp.LastName,
ROUND(SUM(Inv.Total), 2) as 'Total Sales' 
FROM chinook.Employees emp
JOIN chinook.Customers cust 
ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.Invoices Inv 
ON Inv.CustomerId = cust.CustomerId
WHERE emp.Title = 'Sales Support Agent' 
GROUP BY emp.FirstName;

#14. Return the **top Sales Support Agent** by total sales made in **2009**.
SELECT emp.FirstName, emp.LastName,
ROUND(SUM(Inv.Total), 2) as 'Total Sales' 
FROM chinook.Employees emp
JOIN chinook.Customers cust 
ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.Invoices Inv 
ON Inv.CustomerId = cust.CustomerId
WHERE emp.Title = 'Sales Support Agent' 
AND Inv.InvoiceDate LIKE '2009%' 
GROUP BY emp.FirstName
ORDER BY (round(sum(Inv.Total), 2)) DESC LIMIT 1;

#15. Return the top 5 customers by total amount spent (biggest spenders).
SELECT cust.FirstName, cust.LastName, ROUND(SUM(inv.Total), 2) AS TotalSpent
FROM chinook.Customers cust
JOIN chinook.Invoices inv ON cust.CustomerId = inv.CustomerId
GROUP BY cust.FirstName, cust.LastName
ORDER BY TotalSpent DESC
LIMIT 5;

#16. Return the number of tracks available in each genre.
SELECT g.Name AS Genre, COUNT(t.TrackId) AS NumberOfTracks
FROM chinook.Genres g
JOIN chinook.Tracks t ON g.GenreId = t.GenreId
GROUP BY g.Name
ORDER BY NumberOfTracks DESC;

#17. Return albums that contain more than 10 tracks.
SELECT a.Title AS AlbumTitle, ar.Name AS Artist, COUNT(t.TrackId) AS TrackCount
FROM chinook.Albums a
JOIN chinook.Tracks t ON a.AlbumId = t.AlbumId
JOIN chinook.Artists ar ON a.ArtistId = ar.ArtistId
GROUP BY a.AlbumId, a.Title, ar.Name
HAVING COUNT(t.TrackId) > 10
ORDER BY TrackCount DESC;
