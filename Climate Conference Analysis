CREATE TABLE vips (
     member_id INTEGER PRIMARY KEY
   , last_name TEXT
   , first_name TEXT
   , event INTEGER
   , provides_feedback_to INTEGER
   , association TEXT
   , assoc_type TEXT
   , member_since INTEGER
   );
   
CREATE TABLE reservations ( 
    member_id INTEGER
  , hotel INTEGER
  , welcome_rsvp BIT
  , dinner_rsvp BIT
  );
 
 
CREATE TABLE events (
    event_id INTEGER PRIMARY KEY
  , event_name TEXT
  , event_type TEXT
  );
  

CREATE TABLE hotels (
    hotel_id INTEGER PRIMARY KEY
  , hotel_name TEXT
  , address TEXT
  );


INSERT INTO vips VALUES
(2814, 'Fletcher', 'David', 5, 3742, 'Anishinabek Educational Institute', 'education', 2004)
,(1944, 'Kim', 'Jiho', 4, 4230, 'Appalachian State', 'education', 1991)
,(3889, 'Kowalski', 'Alex', 9, 3460, 'Brigg & McKinnnon AEC', 'private', 2015)
,(3775, 'Al-Hassan', 'Amina', 6, 3891, 'California Department of Water Resources', 'government', 2013)
,(4003, 'Chang', 'Nathan', 8, 3960, 'Chang Engineers, LLC', 'private', 2017)
,(3490, 'Anderson', 'Shanae', 2, 4315, 'Chicago Department of Public Health', 'government', 2008)
,(3077, 'Murphy', 'Aisling', 3, 2731, 'Climate Impacts on Farming Institute', 'research', 2006)
,(3960, 'Ivanov', 'Dmitri', 6, 2814, 'Cooperative Institute for Climate, Ocean, and Ecosystem Studies', 'research', 2016)
,(4402, 'Bennett', 'Leah', NULL, NULL, 'Denver Climate Research Foundation', 'research', 2024)
,(3891, 'Roy', 'Harper', 4, 3077, 'Environmental Science Associates', 'private', 2015)
,(4386, 'Silva', 'Thiago', NULL, NULL, 'Everglades Research Institute', 'research', 2023)
,(4297, 'Chukwu', 'Ifeoma', 9, 2716, 'Georgia State University', 'education', 2020)
,(3189, 'Martinez', 'Isabella', 8, 2011, 'Iowa State University', 'education', 2007)
,(3491, 'Gonzalez', 'Victor', 5, 3047, 'McGill University', 'education', 2008)
,(3742, 'Brown', 'Timothy', 3, 3490, 'Michigan State University', 'education', 2012)
,(4361, 'Riley', 'Daniel', 6, 1944, 'Minnesota Water Board', 'education', 2023)
,(1934, 'Garcia', 'Mateo', NULL, NULL, 'Oklahoma Department of Wildlife Conservation', 'government', 1990)
,(2011, 'Patel', 'Anika', 7, 3491, 'Renewable Energy Research Center, Honolulu', 'research', 1995)
,(4315, 'Shepherd', 'Priya', 10, 4003, 'Tech517', 'private', 2022)
,(1738, 'Johnson', 'Denny', NULL, NULL, 'Texas Department of Conservation and Natural Resources', 'government', 1987)
,(4230, 'Parker', 'Moss', 2, 3719, 'University of California, Davis', 'education', 2019)
,(2731, 'Rivera', 'Juan', 1, 4297, 'University of Montana', 'education', 2003)
,(2091, 'Haines', 'Keisha', 11, 3189, 'University of North Carolina', 'education', 1998)
,(2551, 'Nguyen', 'Linh', 2, 2091, 'University of Pennsylvania', 'education', 2002)
,(3047, 'Singh', 'Aarav', 4, 2551, 'US Department of Fish and Wildlife', 'government', 2005)
,(4112, 'Fernandez', 'Lucia', NULL, NULL, 'US Department of Fish and Wildlife', 'government', 2018)
,(3719, 'Denton', 'K. L.', 11, 3889, 'US Department of Housing and Urban Development', 'government', 2011)
,(3460, 'Chen', 'Beverly', 7, 4361, 'US Department of Natural Resources', 'government', 2008)
,(2716, 'Rodriguez', 'Sofia', 7, 3775, 'US Department of Renewable Energy', 'government', 2003)
,(2800, 'Lee', 'Min-Jun', NULL, NULL, 'US Department of Renewable Energy', 'government', 2004)
;


INSERT INTO reservations VALUES
 (3491,  1, 1, 1)
,(4361,  1, 1, 1)
,(3047,  2, 1, 1)
,(3775,  1, 1, 1)
,(4003,  3, 0, 1)
,(4402,  2, 1, 1)
,(3891,  3, 1, 1)
,(2011,  1, 1, 1)
,(4808,  2, 1, 1)
,(3490,  1, 0, 1)
,(3189,  1, 1, 1)
,(1944,  1, 0, 1)
,(2716,  2, 0, 1)
,(2551,  2, 1, 1)
,(4386,  2, 0, 1)
,(2814,  3, 1, 1)
,(1738,  2, 0, 1)
,(3960,  1, 1, 1)
,(4315,  3, 1, 0)
,(4722,  2, 1, 1)
,(2731,  3, 1, 1)
,(2091,  1, 1, 0)
,(3889,  3, 1, 1)
,(3742,  2, 0, 1)
,(3719,  2, 0, 1)
,(3460,  2, 1, 1)
,(3077,  2, 0, 1)
,(4420,  1, 1, 0)
,(2800,  2, 0, 1)
,(1934,  3, 1, 1)
;


INSERT INTO events VALUES
  (1, 'Climate Change Communication: Engaging the Public and Policy Makers', 'Keynote')
, (2, 'Climate Change and Public Health: Risks and Responses', 'Panel')
, (3, 'Climate Change and Agriculture: Ensuring Food Security', 'Panel')
, (4, 'Biodiversity and Ecosystem Services in a Changing Climate', 'Panel')
, (5, 'Indigenous Knowledge and Climate Change Adaptation', 'Panel')
, (6, 'The Role of Oceans in Climate Change: Impacts and Solutions', 'Panel')
, (7, 'Climate Change and Renewable Energy: Innovations and Challenges', 'Panel')
, (8, 'Climate Justice and Equity: Addressing Disproportionate Impacts', 'Panel')
, (9, 'The Economic Impact of Climate Change: Costs and Opportunities', 'Panel')
, (10, 'Technological Innovations for Climate Monitoring and Assessment', 'Workshop')
, (11, 'Urban Resilience: Designing Climate-Smart Cities', 'Workshop')
, (12, 'The Role of Policy in Combating Climate Change', 'Workshop')
;


INSERT INTO hotels VALUES
   (1, 'Hyatt Downtown', '392 South Main Street, Cityville, PA')
 , (2, 'Marriott', '1240 Marshall Avenue, Cityville, PA')
 , (3, 'Four Season''s', '900 Winter Road, Cityville, PA')
 ;



--------------------------------------------------------------------------------------------------------------------------------------------



--INNER JOIN – List of VIPs and the names of the events they are presenting at

-- This query lists all VIPs who are presenting at an event, along with the event name and type
SELECT 
    v.first_name, 
    v.last_name, 
    e.event_name, 
    e.event_type
FROM vips v
INNER JOIN events e ON v.event = e.event_id;

--We use an INNER JOIN to combine the vips and events tables based on the event_id. Only VIPs with a scheduled event are shown. This gives organizers a clear view of who is presenting and on what topic.


--LEFT JOIN – See which VIPs did not RSVP to the welcome party

-- This query shows all VIPs and whether they RSVP’d to the welcome party
SELECT 
    v.first_name, 
    v.last_name, 
    r.welcome_rsvp
FROM vips v
LEFT JOIN reservations r ON v.member_id = r.member_id
WHERE r.welcome_rsvp = 0 OR r.welcome_rsvp IS NULL;

--A LEFT JOIN ensures we include VIPs even if they don’t have a reservation record. The WHERE clause filters only those who didn't RSVP (either 0 or no record at all). This helps with follow-up planning for attendance.


--Multiple JOINs – Show VIPs, their hotel name, and the address

-- This query displays VIPs with their hotel name and address
SELECT 
    v.first_name, 
    v.last_name, 
    h.hotel_name, 
    h.address
FROM vips v
INNER JOIN reservations r ON v.member_id = r.member_id
INNER JOIN hotels h ON r.hotel = h.hotel_id;

--We perform two joins: from vips → reservations → hotels. This gives a full picture of where each VIP is staying, which is important for transportation logistics and hospitality coordination.


--SELF JOIN – Show feedback relationships between VIPs

-- This query matches VIPs with the person they’re providing feedback to
SELECT 
    v1.first_name || ' ' || v1.last_name AS reviewer,
    v2.first_name || ' ' || v2.last_name AS reviewee
FROM vips v1
JOIN vips v2 ON v1.provides_feedback_to = v2.member_id;

--A SELF JOIN is used to map the feedback relationships where one VIP provides feedback to another. This helps track and assign feedback forms and ensures accountability.


--Subquery – Find VIPs who joined before 2010 and are staying at a hotel with other long-term members

-- This query finds long-term members who are staying at hotels with at least one other long-term member
SELECT 
    v.first_name, 
    v.last_name, 
    h.hotel_name
FROM vips v
JOIN reservations r ON v.member_id = r.member_id
JOIN hotels h ON r.hotel = h.hotel_id
WHERE v.member_since < 2010
  AND r.hotel IN (
      SELECT r2.hotel
      FROM vips v2
      JOIN reservations r2 ON v2.member_id = r2.member_id
      WHERE v2.member_since < 2010
      GROUP BY r2.hotel
      HAVING COUNT(*) > 1
  );

--We use a subquery to find hotels with multiple VIPs who have been members since before 2010. This can be useful for VIP networking events or assigning roommates with similar experience levels.


--Query of Choice – Count how many VIPs are in each association type (e.g., education, government)

-- This query shows how many VIPs belong to each association type
SELECT 
    assoc_type, 
    COUNT(*) AS num_vips
FROM vips
GROUP BY assoc_type
ORDER BY num_vips DESC;

--This summarizes the types of organizations represented at the conference, giving insights into audience composition—valuable for panel representation, funding reports, or tailored programming.


--Query of Choice – Which VIPs are not presenting at any event?

-- This query identifies VIPs who are not scheduled to speak at any event
SELECT 
    first_name, 
    last_name
FROM vips
WHERE event IS NULL;

--This helps the organizing team identify attendees who are not speakers and may be assigned to other roles like moderation or feedback.





